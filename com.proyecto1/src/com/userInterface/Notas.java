/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.userInterface;

import com.archivos.Serial;
import com.proyecto1.Curso;
import java.awt.Color;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.json.JSONException;

/**
 * Ventana notas
 *
 * @author Diego
 */
public final class Notas extends javax.swing.JFrame {

    private String curso;
    private int index;

    /**
     * Creates new form Notas
     */
    public Notas() {
        initComponents();
    }

    /**
     * Constructor
     *
     * @param nombre nombre del alumno
     * @param curso curso del alumno
     * @param index índice del alumno en el arraylist de su curso
     * @throws FileNotFoundException
     */
    public Notas(String nombre, String curso, int index) throws FileNotFoundException {
        initComponents();
        String text = jLabel1.getText();
        jLabel1.setText(text + nombre);
        this.curso = curso;
        this.index = index;
        crearTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        volver = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        asignatura = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        actividad = new javax.swing.JButton();
        nota = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        siguiente = new javax.swing.JButton();
        anterior = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabel1.setText("Notas del Alumno: ");

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tabla.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(tabla);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Registro de Notas");

        volver.setText("Volver");
        volver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverActionPerformed(evt);
            }
        });

        jLabel3.setText("Asignatura: ");

        asignatura.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Lenguaje", "Matematica", "Ciencias", "Historia", "Ingles" }));
        asignatura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                asignaturaActionPerformed(evt);
            }
        });

        jLabel4.setText("La Ponderación es en la nota final de la asignatura*");

        actividad.setText("Editar actividad");
        actividad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actividadActionPerformed(evt);
            }
        });

        nota.setText("Editar nota");
        nota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notaActionPerformed(evt);
            }
        });

        jLabel5.setText("Ponderación total: ");

        jLabel6.setText("Promedio de la asignatura: ");

        siguiente.setText("→");
        siguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                siguienteActionPerformed(evt);
            }
        });

        anterior.setText("←");
        anterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anteriorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(volver)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                            .addComponent(actividad)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(nota))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(48, 48, 48)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(asignatura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(anterior)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(siguiente)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(136, 136, 136)
                        .addComponent(jLabel2)))
                .addContainerGap(46, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(anterior)
                    .addComponent(siguiente))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(asignatura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(volver)
                    .addComponent(actividad)
                    .addComponent(nota))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverActionPerformed
        volver();
    }//GEN-LAST:event_volverActionPerformed

    private void volver() {
        Cursos cur;
        try {
            cur = new Cursos();
            this.dispose();
            cur.setVisible(true);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Notas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void asignaturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_asignaturaActionPerformed
        asignatura();
    }//GEN-LAST:event_asignaturaActionPerformed

    private void asignatura() {
        try {
            crearTabla();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Notas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void actividadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actividadActionPerformed
        actividad();
    }//GEN-LAST:event_actividadActionPerformed

    private void actividad() {
        try {
            if (tabla.getSelectedRow() != -1) {
                Serial ser = new Serial();
                Curso cur = (Curso) ser.cargarGson(Curso.class, curso);
                if (tabla.getSelectedRow() < 4) {
                    String pond = null;
                    int pon = 0;
                    do {
                        try {
                            pond = JOptionPane.showInputDialog(null, "Ingrese nueva ponderación para la prueba", "Editar Prueba", JOptionPane.QUESTION_MESSAGE);
                            if (pond == null) {
                                break;
                            } else {
                                pon = Integer.parseInt(pond);
                            }
                        } catch (java.lang.NumberFormatException ex) {
                            pon = 101;
                            JOptionPane.showMessageDialog(null, "Ingrese un número", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    } while (pon > 100 || pon < 0);
                    if (pond != null) {
                        int mul = asignatura.getSelectedIndex() * 5;
                        for (int i = 0; i < cur.getAlumnos().length; i++) {
                            String not = cur.getAlumnos()[i].getNotas()[tabla.getSelectedRow() + mul].split(",")[0];
                            cur.getAlumnos()[i].getNotas()[tabla.getSelectedRow() + mul] = not + "," + pon;
                        }
                        int mes;
                        try {
                            mes = (int) JOptionPane.showInputDialog(null, "Ingrese mes de la Prueba:", "Editar Prueba", JOptionPane.QUESTION_MESSAGE, null, new Object[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, 1);
                        } catch (java.lang.NullPointerException ex) {
                            mes = -1;
                        }
                        if (mes != -1) {
                            Object[] ob;
                            if (mes == 2) {
                                ob = new Object[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28};
                            } else if (mes % 2 == 1) {
                                ob = new Object[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31};
                            } else {
                                ob = new Object[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30};
                            }
                            int dia;
                            try {
                                dia = (int) JOptionPane.showInputDialog(null, "Ingrese día de la Prueba:", "Editar Prueba", JOptionPane.QUESTION_MESSAGE, null, ob, 1);
                            } catch (java.lang.NullPointerException ex) {
                                dia = -1;
                            }
                            if (dia != -1) {
                                String nom = cur.getAsignaturas()[asignatura.getSelectedIndex()].getPlanificacion()[tabla.getSelectedRow()].split(",")[0];
                                cur.getAsignaturas()[asignatura.getSelectedIndex()].getPlanificacion()[tabla.getSelectedRow()] = nom + ",true," + dia + "/" + mes + "/2017";
                                ser.guardarGson(cur, curso);
                                ser.guardarXml(cur, curso);
                                crearTabla();
                            }
                        }
                    }
                } else if (tabla.getSelectedRow() != 4) {
                    String activ = "-1";
                    do {
                        activ = JOptionPane.showInputDialog(null, "Ingrese una breve descripción de la Actividad", "Editar Actividad", JOptionPane.QUESTION_MESSAGE);
                        if (activ == null) {
                            activ = "-1";
                            break;
                        }
                        if (activ.contains(",")) {
                            JOptionPane.showMessageDialog(null, "Por favor no utilize comas ( , )", "Error", JOptionPane.ERROR_MESSAGE);
                            activ = "";
                        }
                    } while (activ.length() == 0);
                    if (activ != "-1") {
                        int mes;
                        try {
                            mes = (int) JOptionPane.showInputDialog(null, "Ingrese mes de la Actividad:", "Editar Actividad", JOptionPane.QUESTION_MESSAGE, null, new Object[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, 1);
                        } catch (java.lang.NullPointerException ex) {
                            mes = -1;
                        }
                        if (mes != -1) {
                            Object[] ob;
                            if (mes == 2) {
                                ob = new Object[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28};
                            } else if (mes % 2 == 1) {
                                ob = new Object[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31};
                            } else {
                                ob = new Object[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30};
                            }
                            int dia;
                            try {
                                dia = (int) JOptionPane.showInputDialog(null, "Ingrese día de la Actividad:", "Editar Actividad", JOptionPane.QUESTION_MESSAGE, null, ob, 1);
                            } catch (java.lang.NullPointerException ex) {
                                dia = -1;
                            }
                            if (dia != -1) {
                                cur.getAsignaturas()[asignatura.getSelectedIndex()].getPlanificacion()[tabla.getSelectedRow()] = activ + ",false," + dia + "/" + mes + "/2017";
                                ser.guardarGson(cur, curso);
                                ser.guardarXml(cur, curso);
                                crearTabla();
                            }
                        }

                    }
                } else {
                    String pond = null;
                    int pon = 0;
                    do {
                        try {
                            pond = JOptionPane.showInputDialog(null, "Ingrese nueva ponderación para El promedio de las actividades", "Editar Prueba", JOptionPane.QUESTION_MESSAGE);
                            if (pond == null) {
                                break;
                            } else {
                                pon = Integer.parseInt(pond);
                            }
                        } catch (java.lang.NumberFormatException ex) {
                            pon = 101;
                            JOptionPane.showMessageDialog(null, "Ingrese un número", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    } while (pon > 100 || pon < 0);
                    if (pond != null) {
                        int mul = asignatura.getSelectedIndex() * 5;
                        for (int i = 0; i < cur.getAlumnos().length; i++) {
                            String not = cur.getAlumnos()[i].getNotas()[tabla.getSelectedRow() + mul].split(",")[0];
                            cur.getAlumnos()[i].getNotas()[tabla.getSelectedRow() + mul] = not + "," + pon;
                        }
                        String nom = cur.getAsignaturas()[asignatura.getSelectedIndex()].getPlanificacion()[tabla.getSelectedRow()].split(",")[0];
                        cur.getAsignaturas()[asignatura.getSelectedIndex()].getPlanificacion()[tabla.getSelectedRow()] = nom + ",true, ";
                        ser.guardarGson(cur, curso);
                        ser.guardarXml(cur, curso);
                        crearTabla();
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "Seleccione una Actividad", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Notas.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | JSONException ex) {
            Logger.getLogger(Notas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void notaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notaActionPerformed
        nota();
    }//GEN-LAST:event_notaActionPerformed

    private void nota() {
        if (tabla.getSelectedRow() != -1) {
            try {
                Serial ser = new Serial();
                Curso cur = (Curso) ser.cargarGson(Curso.class, curso);
                if (tabla.getSelectedRow() < 4) {
                    String activ = "-1";
                    double not = 0.0;
                    do {
                        activ = JOptionPane.showInputDialog(null, "Ingrese nueva nota ej:3.5", "Editar Nota", JOptionPane.QUESTION_MESSAGE);
                        if (activ == null) {
                            activ = "-1";
                            break;
                        }
                        if (activ.contains(",")) {
                            activ = activ.replaceAll(",", ".");
                        }
                        try {
                            not = Double.parseDouble(activ);
                            if (not < 1.0 || not > 7.0) {
                                activ = "";
                                JOptionPane.showMessageDialog(null, "Ingrese un número entre 1.0 y 7.0", "Error", JOptionPane.ERROR_MESSAGE);
                            }
                        } catch (java.lang.NumberFormatException ex) {
                            activ = "";
                            JOptionPane.showMessageDialog(null, "Ingrese solo números", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    } while (activ.length() == 0 || not < 1.0 || not > 7.0);
                    if (activ != "-1") {
                        int mul = asignatura.getSelectedIndex() * 5;
                        String pond = cur.getAlumnos()[index].getNotas()[tabla.getSelectedRow() + mul].split(",")[1];
                        cur.getAlumnos()[index].getNotas()[tabla.getSelectedRow() + mul] = not + "," + pond;
                        ser.guardarGson(cur, curso);
                        ser.guardarXml(cur, curso);
                        crearTabla();
                    }
                } else if (tabla.getSelectedRow() == 4) {
                    JOptionPane.showMessageDialog(null, "Esta nota es el promedio de las 5 actividades de la asignatura", "Advertencia", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    String activ = "-1";
                    double not = 0.0;
                    do {
                        activ = JOptionPane.showInputDialog(null, "Ingrese nueva nota ej:3.5", "Editar Nota", JOptionPane.QUESTION_MESSAGE);
                        if (activ == null) {
                            activ = "-1";
                            break;
                        }
                        if (activ.contains(",")) {
                            activ = activ.replaceAll(",", ".");
                        }
                        try {
                            not = Double.parseDouble(activ);
                            if (not < 1.0 || not > 7.0) {
                                activ = "";
                                JOptionPane.showMessageDialog(null, "Ingrese un número entre 1.0 y 7.0", "Error", JOptionPane.ERROR_MESSAGE);
                            }
                        } catch (java.lang.NumberFormatException ex) {
                            activ = "";
                            JOptionPane.showMessageDialog(null, "Ingrese solo números", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    } while (activ.length() == 0 || not < 1.0 || not > 7.0);
                    if (activ != "-1") {
                        int mul = asignatura.getSelectedIndex() * 5;
                        cur.getAlumnos()[index].getNotasAsig()[tabla.getSelectedRow() - 5 + mul] = "" + not;
                        double sum = (Double.parseDouble(cur.getAlumnos()[index].getNotasAsig()[mul]) + Double.parseDouble(cur.getAlumnos()[index].getNotasAsig()[1 + mul]) + Double.parseDouble(cur.getAlumnos()[index].getNotasAsig()[2 + mul]) + Double.parseDouble(cur.getAlumnos()[index].getNotasAsig()[3 + mul]) + Double.parseDouble(cur.getAlumnos()[index].getNotasAsig()[4 + mul])) / 5;
                        String pond = cur.getAlumnos()[index].getNotas()[4 + mul].split(",")[1];
                        String nota = "" + sum;
                        nota = nota.substring(0, 3);
                        cur.getAlumnos()[index].getNotas()[4 + mul] = nota + "," + pond;
                        ser.guardarGson(cur, curso);
                        ser.guardarXml(cur, curso);
                        crearTabla();
                    }
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Notas.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException | JSONException ex) {
                Logger.getLogger(Notas.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione una actividad", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void anteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anteriorActionPerformed
        anterior();
    }//GEN-LAST:event_anteriorActionPerformed

    private void anterior() {
        Serial ser = new Serial();
        try {
            Curso cur = (Curso) ser.cargarGson(Curso.class, curso);
            Notas not = new Notas(cur.getAlumnos()[index - 1].getNombre(), curso, index - 1);
            this.dispose();
            not.setVisible(true);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Asistencia.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void siguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_siguienteActionPerformed
        siguiente();
    }//GEN-LAST:event_siguienteActionPerformed

    private void siguiente(){
        Serial ser = new Serial();
        try {
            Curso cur = (Curso) ser.cargarGson(Curso.class, curso);
            Notas not = new Notas(cur.getAlumnos()[index + 1].getNombre(), curso, index + 1);
            this.dispose();
            not.setVisible(true);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Asistencia.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void crearTabla() throws FileNotFoundException {
        Serial ser = new Serial();
        Curso cur = (Curso) ser.cargarGson(Curso.class, curso);
        String[] fil = new String[]{"Actividad", "Nota", "Ponderación", "Fecha"};
        String[][] col = new String[cur.getAsignaturas()[asignatura.getSelectedIndex()].getPlanificacion().length][4];
        int cont = 0;
        int mul = asignatura.getSelectedIndex() * 5;
        int pond = 0;
        for (int i = 0; i < cur.getAsignaturas()[asignatura.getSelectedIndex()].getPlanificacion().length; i++) {
            col[i][0] = cur.getAsignaturas()[asignatura.getSelectedIndex()].getPlanificacion()[i].split(",")[0];
            if (cur.getAsignaturas()[asignatura.getSelectedIndex()].getPlanificacion()[i].split(",")[1].contains("true")) {
                col[i][1] = cur.getAlumnos()[index].getNotas()[mul + cont].split(",")[0];
                col[i][2] = cur.getAlumnos()[index].getNotas()[mul + cont].split(",")[1]+"%";
                pond += Integer.parseInt(cur.getAlumnos()[index].getNotas()[mul + cont].split(",")[1]);
                cont++;
            }
            if (i > 4) {
                int mult = asignatura.getSelectedIndex() * 5;
                col[i][1] = cur.getAlumnos()[index].getNotasAsig()[mult + i - 5];
            }
            col[i][3] = cur.getAsignaturas()[asignatura.getSelectedIndex()].getPlanificacion()[i].split(",")[2];
        }
        tabla.setModel(new javax.swing.table.DefaultTableModel(col, fil));
        jLabel5.setText("Ponderación total: " + pond);
        if (pond < 100 || pond > 100) {
            jLabel5.setForeground(new Color(255, 0, 0));
        } else {
            jLabel5.setForeground(new Color(0, 0, 0));
        }
        jLabel6.setText("Promedio de la Asignatura: " + cur.getAlumnos()[index].getPromedioAsignatura(asignatura.getSelectedIndex() + 1));
        double nota = Double.parseDouble(cur.getAlumnos()[index].getPromedioAsignatura(asignatura.getSelectedIndex() + 1));
        if (nota < 4) {
            jLabel6.setForeground(new Color(255, 0, 0));
        } else {
            jLabel6.setForeground(new Color(0, 0, 0));
        }
        if (index == 0) {
            anterior.setEnabled(false);
        } else {
            anterior.setEnabled(true);
        }
        if (index == cur.getAlumnos().length - 1) {
            siguiente.setEnabled(false);
        } else {
            siguiente.setEnabled(true);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Notas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Notas().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton actividad;
    private javax.swing.JButton anterior;
    private javax.swing.JComboBox<String> asignatura;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton nota;
    private javax.swing.JButton siguiente;
    private javax.swing.JTable tabla;
    private javax.swing.JButton volver;
    // End of variables declaration//GEN-END:variables
}
