/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.userInterface;

import com.archivos.Database;
import com.proyecto1.Apoderado;
import com.proyecto1.Curso;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.orm.PersistentException;

/**
 * Ventana cursos Si se mantiene el click izquierdo sobre un alumno se muestra
 * un popup con su apoderado y sus hijos
 *
 * @author Diego
 */
public final class Cursos extends javax.swing.JFrame {

    private final boolean gen;

    /**
     * Creates new form Cursos
     *
     */
    public Cursos() {
        this.gen = true;
        Database dat = new Database();
        if (dat.estadoTablas()) {
            int size=0;
            try {
                Curso cur = dat.retrieveCurso("1 A");
                size=cur.getAlumnos().size();
            } catch (PersistentException ex) {
                
            }
            if(size!=0){
            initComponents();
            crearLista();
            this.setLocationRelativeTo(null);
            ArrayList<String> letras = dat.existCurso(nivel.getSelectedIndex() + 1);
            String[] model = new String[letras.size()];
            for (int i = 0; i < letras.size(); i++) {
                model[i] = letras.get(i);
            }
            ab.setModel(new javax.swing.DefaultComboBoxModel<>(model));
            }else{
                cargar();
            }
        } else {
            cargar();
        }
    }

    public Cursos(boolean gen) {
        this.gen = gen;
        initComponents();
        generar.setEnabled(gen);
        crearLista();
        Database dat = new Database();
        ArrayList<String> letras = dat.existCurso(nivel.getSelectedIndex() + 1);
        String[] model = new String[letras.size()];
        for (int i = 0; i < letras.size(); i++) {
            model[i] = letras.get(i);
        }
        ab.setModel(new javax.swing.DefaultComboBoxModel<>(model));
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popup = new javax.swing.JPopupMenu();
        carga = new javax.swing.JPopupMenu();
        nivel = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        lista = new javax.swing.JList<>();
        asistencia = new javax.swing.JButton();
        anotaciones = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        notas = new javax.swing.JButton();
        reportes = new javax.swing.JButton();
        salir = new javax.swing.JButton();
        generar = new javax.swing.JButton();
        nuevo = new javax.swing.JButton();
        nuevoCur = new javax.swing.JButton();
        ab = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        nivel.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1°", "2°", "3°", "4°", "5°", "6°", "7°", "8°" }));
        nivel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nivelActionPerformed(evt);
            }
        });

        jScrollPane1.setMinimumSize(new java.awt.Dimension(256, 23));

        lista.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lista.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                listaMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                listaMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(lista);

        asistencia.setText("Asistencia");
        asistencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                asistenciaActionPerformed(evt);
            }
        });

        anotaciones.setText("Anotaciones");
        anotaciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anotacionesActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Alumnos en el Curso:");

        notas.setText("Notas");
        notas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notasActionPerformed(evt);
            }
        });

        reportes.setText("Reportes");
        reportes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportesActionPerformed(evt);
            }
        });

        salir.setText("Salir");
        salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirActionPerformed(evt);
            }
        });

        generar.setText("Generar nuevo colegio");
        generar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generarActionPerformed(evt);
            }
        });

        nuevo.setText("Nuevo Alumno");
        nuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoActionPerformed(evt);
            }
        });

        nuevoCur.setText("Nuevo Curso");
        nuevoCur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoCurActionPerformed(evt);
            }
        });

        ab.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A", "B" }));
        ab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(75, 75, 75)
                                .addComponent(nivel, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ab, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(nuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(notas, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(asistencia, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(anotaciones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(reportes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(generar, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)))))
                        .addGap(0, 70, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(141, 141, 141)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(salir)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(177, 177, 177)
                .addComponent(nuevoCur)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(salir)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nivel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ab, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(nuevoCur)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reportes)
                    .addComponent(notas))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(asistencia)
                    .addComponent(anotaciones))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(generar)
                    .addComponent(nuevo))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nivelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nivelActionPerformed
        ab.setSelectedIndex(0);
        Database dat = new Database();
        ArrayList<String> letras = dat.existCurso(nivel.getSelectedIndex() + 1);
        String[] model = new String[letras.size()];
        for (int i = 0; i < letras.size(); i++) {
            model[i] = letras.get(i);
        }
        ab.setModel(new javax.swing.DefaultComboBoxModel<>(model));
        crearLista();
    }//GEN-LAST:event_nivelActionPerformed

    private void asistenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_asistenciaActionPerformed
        asistencia();
    }//GEN-LAST:event_asistenciaActionPerformed

    private void asistencia() {
        if (lista.getSelectedValue() == null) {
            JOptionPane.showMessageDialog(null, "Seleccione un alumno", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            int niv = nivel.getSelectedIndex() + 1;
            String letra = "" + ab.getSelectedItem();
            String curso = niv + " " + letra;
            Database dat = new Database();
            Curso cur = null;
            try {
                cur = dat.retrieveCurso(curso);
            } catch (PersistentException ex) {
                Logger.getLogger(Cursos.class.getName()).log(Level.SEVERE, null, ex);
            }
            Asistencia asis = new Asistencia(lista.getSelectedValue(), cur, lista.getSelectedIndex(), this.gen);
            this.dispose();
            asis.setVisible(true);
        }
    }

    private void anotacionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anotacionesActionPerformed
        anotaciones();
    }//GEN-LAST:event_anotacionesActionPerformed

    private void anotaciones() {
        if (lista.getSelectedValue() == null) {
            JOptionPane.showMessageDialog(null, "Seleccione un alumno", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            int niv = nivel.getSelectedIndex() + 1;
            String letra = "" + ab.getSelectedItem();
            String curso = niv + " " + letra;
            Database dat = new Database();
            Curso cur = null;
            try {
                cur = dat.retrieveCurso(curso);
            } catch (PersistentException ex) {
                Logger.getLogger(Cursos.class.getName()).log(Level.SEVERE, null, ex);
            }
            Anotaciones anot;
            anot = new Anotaciones(lista.getSelectedValue(), cur, lista.getSelectedIndex(), this.gen);
            anot.setVisible(true);
            this.dispose();
        }
    }

    private void listaMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listaMouseReleased
        if (evt.getButton() == (java.awt.event.MouseEvent.BUTTON1)) {
            popup.setVisible(false);
        }
    }//GEN-LAST:event_listaMouseReleased

    private void listaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listaMousePressed
        if (evt.getButton() == (java.awt.event.MouseEvent.BUTTON1)) {
            popup.setLocation(evt.getLocationOnScreen());
            crearPopup();
        }
    }//GEN-LAST:event_listaMousePressed

    private void notasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notasActionPerformed
        notas();
    }//GEN-LAST:event_notasActionPerformed

    private void notas() {
        if (lista.getSelectedValue() == null) {
            JOptionPane.showMessageDialog(null, "Seleccione un alumno", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            int niv = nivel.getSelectedIndex() + 1;
            String letra = "" + ab.getSelectedItem();
            String curso = niv + " " + letra;
            Database dat = new Database();
            Curso cur = null;
            try {
                cur = dat.retrieveCurso(curso);
            } catch (PersistentException ex) {
                Logger.getLogger(Cursos.class.getName()).log(Level.SEVERE, null, ex);
            }
            Notas not = new Notas(lista.getSelectedValue(), cur, lista.getSelectedIndex(), this.gen);
            this.dispose();
            not.setVisible(true);
        }
    }

    private void reportesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportesActionPerformed
        reportes();
    }//GEN-LAST:event_reportesActionPerformed

    private void reportes() {
        int niv = nivel.getSelectedIndex() + 1;
        String letra = "" + ab.getSelectedItem();
        String curso = niv + " " + letra;
        Database dat = new Database();
        Curso cur = null;
        try {
            cur = dat.retrieveCurso(curso);
        } catch (PersistentException ex) {
            Logger.getLogger(Cursos.class.getName()).log(Level.SEVERE, null, ex);
        }
        Reportes rep;
        rep = new Reportes(cur, this.gen);
        this.dispose();
        rep.setVisible(true);
    }

    private void salirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirActionPerformed
        System.exit(0);
    }//GEN-LAST:event_salirActionPerformed

    private void generarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generarActionPerformed
        this.setVisible(false);
        this.dispose();
        cargar();
    }//GEN-LAST:event_generarActionPerformed

    private void cargar() {
        this.setVisible(false);
        this.dispose();
        new Thread(new Carga()).start();
    }

    private void nuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoActionPerformed
        añadir();
    }//GEN-LAST:event_nuevoActionPerformed

    private void nuevoCurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoCurActionPerformed
        int nivel;
        try {
            nivel = Integer.parseInt("" + JOptionPane.showInputDialog(null, "Seleccione nivel al que agregar curso", "Nuevo curso", JOptionPane.QUESTION_MESSAGE, null, new Object[]{"1", "2", "3", "4", "5", "6", "7", "8"}, "1"));
        } catch (java.lang.NullPointerException | java.lang.NumberFormatException ex) {
            nivel = -1;
        }
        if (nivel != -1) {
            Database dat = new Database();
            dat.addCurso(nivel);
            Cursos cur;
            cur = new Cursos(this.gen);
            cur.setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_nuevoCurActionPerformed

    private void abActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abActionPerformed
        crearLista();
    }//GEN-LAST:event_abActionPerformed

    private void añadir() {
        String nom = JOptionPane.showInputDialog(null, "Ingrese nombre del nuevo alumno :(apellido nombre)", "Nuevo alumno", JOptionPane.QUESTION_MESSAGE);
        if (nom != null && nom.split(" ").length == 2) {
            nom = nom.toLowerCase();
            String[] split = nom.split(" ");
            split[0] = split[0].substring(0, 1).toUpperCase() + split[0].substring(1);
            split[1] = split[1].substring(0, 1).toUpperCase() + split[1].substring(1);
            nom = split[0] + " " + split[1];
            int niv = nivel.getSelectedIndex() + 1;
            String letra = "" + ab.getSelectedItem();
            String curso = niv + " " + letra;
            Database dat = new Database();
            Curso cur = null;
            try {
                cur = dat.retrieveCurso(curso);
            } catch (PersistentException ex) {
                Logger.getLogger(Cursos.class.getName()).log(Level.SEVERE, null, ex);
            }
            boolean exisap = false;
            boolean exis = false;
            for (int i = 0; i < cur.getAlumnos().size(); i++) {
                String ap = cur.getAlumnos().get(i).getApoderado().getNombre().toLowerCase();
                if (ap.contains(nom.split(" ")[0].toLowerCase())) {
                    exisap = true;
                }
                String nomb = cur.getAlumnos().get(i).getNombre().toLowerCase();
                if (nomb.equals(nom.toLowerCase())) {
                    exis = true;
                }
            }
            if (exisap && !exis) {
                int sel = JOptionPane.showOptionDialog(null, "Apoderado con apellido " + nom.split(" ")[0] + " encontrado, desea agregar el alumno a este apoderado?", "Confirmación", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[]{"Si", "No"}, null);
                if (sel != -1) {
                    if (sel == 0) {
                        Apoderado apo = new Apoderado();
                        for (int i = 0; i < cur.getAlumnos().size(); i++) {
                            String ap = cur.getAlumnos().get(i).getApoderado().getNombre().toLowerCase();
                            if (ap.contains(nom.split(" ")[0].toLowerCase())) {
                                cur.getAlumnos().get(i).getApoderado().getHijos().add(nom);
                                apo = cur.getAlumnos().get(i).getApoderado();
                            }
                        }
                        cur.addAlumno(nom, apo);
                        dat.addAlumno(apo, cur.getAlumnos().get(0).getAsistencia().size(), cur.getNivel() + " " + cur.getLetra(), nom, cur.getAlumnos().get(0).getNotas(), cur.getAlumnos().get(0).getNotasAsig(), true);
                        crearLista();
                    } else {
                        exisap = !exisap;
                    }
                }
            }
            if (!exisap && !exis) {
                String nomAp = JOptionPane.showInputDialog(null, "Ingrese sólo nombre del apoderado (no modifique el apellido)", nom.split(" ")[0] + " nombre");
                if (nomAp != null && !nomAp.split(" ")[0].equals(nom.split(" ")[0])) {
                    nomAp = "-1";
                }
                if (nomAp != null && nomAp.split(" ").length == 2) {
                    nomAp = nomAp.toLowerCase();
                    String[] split2 = nomAp.split(" ");
                    split2[0] = split2[0].substring(0, 1).toUpperCase() + split2[0].substring(1);
                    split2[1] = split2[1].substring(0, 1).toUpperCase() + split2[1].substring(1);
                    nomAp = split2[0] + " " + split2[1];
                    Apoderado ap = new Apoderado(nomAp);
                    ap.getHijos().add(nom);
                    cur.addAlumno(nom, ap);
                    dat.addAlumno(ap, cur.getAlumnos().get(0).getAsistencia().size(), cur.getNivel() + " " + cur.getLetra(), nom, cur.getAlumnos().get(0).getNotas(), cur.getAlumnos().get(0).getNotasAsig(), false);
                    crearLista();
                } else if (nomAp != null && nomAp.split(" ").length != 2) {
                    JOptionPane.showMessageDialog(null, "Ingrese en la forma: nombre apellido (No modifique el apellido)", "Error", JOptionPane.ERROR_MESSAGE, null);
                }
            } else if (exis) {
                JOptionPane.showMessageDialog(null, "Ya existe el alumno " + nom, "Error", JOptionPane.ERROR_MESSAGE, null);
            }
        } else if (nom != null && nom.split(" ").length != 2) {
            JOptionPane.showMessageDialog(null, "Ingrese en la forma: nombre apellido", "Error", JOptionPane.ERROR_MESSAGE, null);
        }
    }

    /**
     * Crear Popup de apoderados con sus hijos
     */
    private void crearPopup() {
        if (lista.getSelectedIndex() != -1) {
            int niv = nivel.getSelectedIndex() + 1;
            String letra = "" + ab.getSelectedItem();
            String curso = niv + " " + letra;
            Database dat = new Database();
            Curso cur = null;
            try {
                cur = (Curso) dat.retrieveCurso(curso);
            } catch (PersistentException ex) {
                Logger.getLogger(Cursos.class.getName()).log(Level.SEVERE, null, ex);
            }
            popup.removeAll();
            popup.add("Apoderado: " + cur.getAlumnos().get(lista.getSelectedIndex()).getApoderado().getNombre());
            String str = "" + cur.getAlumnos().get(lista.getSelectedIndex()).getApoderado().getHijos();
            popup.add("Hijos: " + str.replaceAll("[\\[\\]]", ""));
            popup.setVisible(true);
        }
    }

    /**
     * Rellenar la lista con los nombres del curso seleccionado
     *
     * @throws FileNotFoundException
     */
    private void crearLista() {
        Database dat = new Database();
        int niv = nivel.getSelectedIndex() + 1;
        String letra = "" + ab.getSelectedItem();
        String curso = niv + " " + letra;
        Curso cur = null;
        try {
            cur = dat.retrieveCurso(curso);
        } catch (PersistentException ex) {
            Logger.getLogger(Cursos.class.getName()).log(Level.SEVERE, null, ex);
        }
        String[] list = new String[cur.getAlumnos().size()];
        for (int i = 0; i < list.length; i++) {
            list[i] = (cur.getAlumnos().get(i).getNombre());
        }
        lista.setListData(list);
        if (cur.getAlumnos().size() == 0) {
            reportes.setEnabled(false);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cursos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Cursos().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ab;
    private javax.swing.JButton anotaciones;
    private javax.swing.JButton asistencia;
    private javax.swing.JPopupMenu carga;
    private javax.swing.JButton generar;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> lista;
    private javax.swing.JComboBox<String> nivel;
    private javax.swing.JButton notas;
    private javax.swing.JButton nuevo;
    private javax.swing.JButton nuevoCur;
    private javax.swing.JPopupMenu popup;
    private javax.swing.JButton reportes;
    private javax.swing.JButton salir;
    // End of variables declaration//GEN-END:variables
}
