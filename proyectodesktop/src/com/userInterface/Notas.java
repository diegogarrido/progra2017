/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.userInterface;

import com.archivos.Database;
import com.proyecto1.Curso;
import com.proyecto1.Profesor;
import java.awt.Color;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.orm.PersistentException;

/**
 * Ventana notas
 *
 * @author Diego
 */
public final class Notas extends javax.swing.JFrame {

    private boolean gen;
    private Curso curso;
    private int index;
    private boolean salir = true;

    /**
     * Constructor
     *
     * @param nombre nombre del alumno
     * @param curso curso del alumno
     * @param index índice del alumno en el arraylist de su curso
     * @param gen
     */
    public Notas(String nombre, Curso curso, int index, boolean gen) {
        initComponents();
        this.gen = gen;
        String text = jLabel1.getText();
        jLabel1.setText(text + nombre);
        this.curso = curso;
        this.index = index;
        ArrayList<String> asign = new ArrayList();
        String exis = "";
        for (int i = 0; i < curso.getAsignaturas().size(); i++) {
            if (!exis.contains(curso.getAsignaturas().get(i).getNombre())) {
                asign.add(curso.getAsignaturas().get(i).getNombre());
                exis += curso.getAsignaturas().get(i).getNombre();
            }
        }
        String[] ob = new String[asign.size()];
        for (int i = 0; i < ob.length; i++) {
            ob[i] = asign.get(i);
        }
        asignatura.setModel(new javax.swing.DefaultComboBoxModel<>(ob));
        crearTabla();
        if (index == 0) {
            anterior.setEnabled(false);
        } else {
            anterior.setEnabled(true);
        }
        if (index == curso.getAlumnos().size() - 1) {
            siguiente.setEnabled(false);
        } else {
            siguiente.setEnabled(true);
        }
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        volver = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        asignatura = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        actividad = new javax.swing.JButton();
        nota = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        siguiente = new javax.swing.JButton();
        anterior = new javax.swing.JButton();
        añadir = new javax.swing.JButton();
        addAsignatura = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setText("Notas del Alumno: ");

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tabla.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(tabla);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Registro de Notas");

        volver.setText("Volver");
        volver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverActionPerformed(evt);
            }
        });

        jLabel3.setText("Asignatura: ");

        asignatura.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Lenguaje", "Matematica", "Ciencias", "Historia", "Ingles" }));
        asignatura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                asignaturaActionPerformed(evt);
            }
        });

        jLabel4.setText("La Ponderación es en la nota final de la asignatura*");

        actividad.setText("Editar actividad");
        actividad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actividadActionPerformed(evt);
            }
        });

        nota.setText("Editar nota");
        nota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notaActionPerformed(evt);
            }
        });

        jLabel5.setText("Ponderación total: ");

        jLabel6.setText("Promedio de la asignatura: ");

        siguiente.setText("→");
        siguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                siguienteActionPerformed(evt);
            }
        });

        anterior.setText("←");
        anterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anteriorActionPerformed(evt);
            }
        });

        añadir.setText("Añadir actividad");
        añadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                añadirActionPerformed(evt);
            }
        });

        addAsignatura.setText("Nueva asignatura");
        addAsignatura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAsignaturaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(18, 18, 18)
                                        .addComponent(asignatura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(45, 45, 45))
                                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(113, 113, 113))
                                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(anterior)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(53, 53, 53)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(siguiente))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(136, 136, 136)
                        .addComponent(jLabel2)))
                .addContainerGap(46, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(volver)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(actividad)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nota)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(addAsignatura, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(añadir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(39, 39, 39))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(anterior)
                    .addComponent(siguiente))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(asignatura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(addAsignatura))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(volver)
                    .addComponent(actividad)
                    .addComponent(nota)
                    .addComponent(añadir))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverActionPerformed
        volver();
    }//GEN-LAST:event_volverActionPerformed

    private void volver() {
        if (salir) {
            Cursos cur;
            cur = new Cursos(this.gen);
            this.dispose();
            cur.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null, "La Ponderación total debe ser de 100", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void asignaturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_asignaturaActionPerformed
        asignatura();
    }//GEN-LAST:event_asignaturaActionPerformed

    private void asignatura() {
        crearTabla();
    }

    private void actividadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actividadActionPerformed
        actividad();
    }//GEN-LAST:event_actividadActionPerformed

    private void actividad() {
        Database dat = new Database();
        if (tabla.getSelectedRow() != -1) {
            if (curso.getAsignaturas().get(asignatura.getSelectedIndex()).getPlanificacion().get(tabla.getSelectedRow()).contains("true")) {
                String pond = null;
                int pon = 0;
                do {
                    try {
                        pond = JOptionPane.showInputDialog(null, "Ingrese nueva ponderación para la prueba", "Editar Prueba", JOptionPane.QUESTION_MESSAGE);
                        if (pond == null) {
                            break;
                        } else {
                            pon = Integer.parseInt(pond);
                        }
                    } catch (java.lang.NumberFormatException ex) {
                        pon = 101;
                        JOptionPane.showMessageDialog(null, "Ingrese un número", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } while (pon > 100 || pon < 0);
                if (pond != null) {
                    int mul = asignatura.getSelectedIndex() * 5;
                    for (int i = 0; i < curso.getAlumnos().size(); i++) {
                        String not = curso.getAlumnos().get(i).getNotas().get(tabla.getSelectedRow() + mul).split(",")[0];
                        curso.getAlumnos().get(i).getNotas().set(tabla.getSelectedRow() + mul, not + "," + pon + "," + asignatura.getSelectedItem());
                    }
                    int mes;
                    try {
                        mes = (int) JOptionPane.showInputDialog(null, "Ingrese mes de la Prueba:", "Editar Prueba", JOptionPane.QUESTION_MESSAGE, null, new Object[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, 1);
                    } catch (java.lang.NullPointerException ex) {
                        mes = -1;
                    }
                    if (mes != -1) {
                        Object[] ob;
                        if (mes == 2) {
                            ob = new Object[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28};
                        } else if (mes % 2 == 1) {
                            ob = new Object[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31};
                        } else {
                            ob = new Object[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30};
                        }
                        int dia;
                        try {
                            dia = (int) JOptionPane.showInputDialog(null, "Ingrese día de la Prueba:", "Editar Prueba", JOptionPane.QUESTION_MESSAGE, null, ob, 1);
                        } catch (java.lang.NullPointerException ex) {
                            dia = -1;
                        }
                        if (dia != -1) {
                            String nom = curso.getAsignaturas().get(asignatura.getSelectedIndex()).getPlanificacion().get(tabla.getSelectedRow()).split(",")[0];
                            curso.getAsignaturas().get(asignatura.getSelectedIndex()).getPlanificacion().set(tabla.getSelectedRow(), nom + ",true," + dia + "/" + mes + "/2017");
                            try {
                                dat.updateData(curso);
                                crearTabla();
                            } catch (PersistentException ex) {
                                Logger.getLogger(Notas.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                }
            } else if (tabla.getSelectedRow() != 4 && curso.getAsignaturas().get(asignatura.getSelectedIndex()).getPlanificacion().get(tabla.getSelectedRow()).contains("false")) {
                String activ = "-1";
                do {
                    activ = JOptionPane.showInputDialog(null, "Ingrese una breve descripción de la Actividad", "Editar Actividad", JOptionPane.QUESTION_MESSAGE);
                    if (activ == null) {
                        activ = "-1";
                        break;
                    }
                    if (activ.contains(",")) {
                        JOptionPane.showMessageDialog(null, "Por favor no utilize comas ( , )", "Error", JOptionPane.ERROR_MESSAGE);
                        activ = "";
                    }
                } while (activ.length() == 0);
                if (activ != "-1") {
                    int mes;
                    try {
                        mes = (int) JOptionPane.showInputDialog(null, "Ingrese mes de la Actividad:", "Editar Actividad", JOptionPane.QUESTION_MESSAGE, null, new Object[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, 1);
                    } catch (java.lang.NullPointerException ex) {
                        mes = -1;
                    }
                    if (mes != -1) {
                        Object[] ob;
                        if (mes == 2) {
                            ob = new Object[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28};
                        } else if (mes % 2 == 1) {
                            ob = new Object[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31};
                        } else {
                            ob = new Object[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30};
                        }
                        int dia;
                        try {
                            dia = (int) JOptionPane.showInputDialog(null, "Ingrese día de la Actividad:", "Editar Actividad", JOptionPane.QUESTION_MESSAGE, null, ob, 1);
                        } catch (java.lang.NullPointerException ex) {
                            dia = -1;
                        }
                        if (dia != -1) {
                            curso.getAsignaturas().get(asignatura.getSelectedIndex()).getPlanificacion().set(tabla.getSelectedRow(), activ + ",false," + dia + "/" + mes + "/2017");
                            try {
                                dat.updateData(curso);
                                crearTabla();
                            } catch (PersistentException ex) {
                                Logger.getLogger(Notas.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }

                }
            } else {
                String pond = null;
                int pon = 0;
                do {
                    try {
                        pond = JOptionPane.showInputDialog(null, "Ingrese nueva ponderación para el promedio de las actividades", "Editar Prueba", JOptionPane.QUESTION_MESSAGE);
                        if (pond == null) {
                            break;
                        } else {
                            pon = Integer.parseInt(pond);
                        }
                    } catch (java.lang.NumberFormatException ex) {
                        pon = 101;
                        JOptionPane.showMessageDialog(null, "Ingrese un número", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } while (pon > 100 || pon < 0);
                if (pond != null) {
                    int mul = asignatura.getSelectedIndex() * 5;
                    for (int i = 0; i < curso.getAlumnos().size(); i++) {
                        String not = curso.getAlumnos().get(i).getNotas().get(tabla.getSelectedRow() + mul).split(",")[0];
                        curso.getAlumnos().get(i).getNotas().set(tabla.getSelectedRow() + mul, not + "," + pon + "," + asignatura.getSelectedItem());
                    }
                    String nom = curso.getAsignaturas().get(asignatura.getSelectedIndex()).getPlanificacion().get(tabla.getSelectedRow()).split(",")[0];
                    curso.getAsignaturas().get(asignatura.getSelectedIndex()).getPlanificacion().set(tabla.getSelectedRow(), nom + ",true, ");
                    try {
                        dat.updateData(curso);
                    } catch (PersistentException ex) {
                        Logger.getLogger(Notas.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    crearTabla();
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione una Actividad", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void notaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notaActionPerformed
        nota();
    }//GEN-LAST:event_notaActionPerformed

    private void nota() {
        if (tabla.getSelectedRow() != -1) {
            try {
                Database dat = new Database();
                Curso cur = curso;
                if (curso.getAsignaturas().get(asignatura.getSelectedIndex()).getPlanificacion().get(tabla.getSelectedRow()).contains("true") && tabla.getSelectedRow() < 4) {
                    String activ = "-1";
                    double not = 0.0;
                    do {
                        activ = JOptionPane.showInputDialog(null, "Ingrese nueva nota ej:3.5", "Editar Nota", JOptionPane.QUESTION_MESSAGE);
                        if (activ == null) {
                            activ = "-1";
                            break;
                        }
                        if (activ.contains(",")) {
                            activ = activ.replaceAll(",", ".");
                        }
                        try {
                            not = Double.parseDouble(activ);
                            if (not < 1.0 || not > 7.0) {
                                activ = "";
                                JOptionPane.showMessageDialog(null, "Ingrese un número entre 1.0 y 7.0", "Error", JOptionPane.ERROR_MESSAGE);
                            }
                        } catch (java.lang.NumberFormatException ex) {
                            activ = "";
                            JOptionPane.showMessageDialog(null, "Ingrese solo números", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    } while (activ.length() == 0 || not < 1.0 || not > 7.0);
                    if (activ != "-1") {
                        int mul = asignatura.getSelectedIndex() * 5;
                        String pond = cur.getAlumnos().get(index).getNotas().get(tabla.getSelectedRow() + mul).split(",")[1];
                        cur.getAlumnos().get(index).getNotas().set(tabla.getSelectedRow() + mul, not + "," + pond + "," + asignatura.getSelectedItem());
                        dat.updateData(cur);
                        crearTabla();
                    }
                } else if (tabla.getSelectedRow() == 4) {
                    JOptionPane.showMessageDialog(null, "Esta nota es el promedio de las 5 actividades de la asignatura", "Advertencia", JOptionPane.INFORMATION_MESSAGE);
                } else if (curso.getAsignaturas().get(asignatura.getSelectedIndex()).getPlanificacion().get(tabla.getSelectedRow()).contains("false")) {
                    String activ = "-1";
                    double not = 0.0;
                    do {
                        activ = JOptionPane.showInputDialog(null, "Ingrese nueva nota ej:3.5", "Editar Nota", JOptionPane.QUESTION_MESSAGE);
                        if (activ == null) {
                            activ = "-1";
                            break;
                        }
                        if (activ.contains(",")) {
                            activ = activ.replaceAll(",", ".");
                        }
                        try {
                            not = Double.parseDouble(activ);
                            if (not < 1.0 || not > 7.0) {
                                activ = "";
                                JOptionPane.showMessageDialog(null, "Ingrese un número entre 1.0 y 7.0", "Error", JOptionPane.ERROR_MESSAGE);
                            }
                        } catch (java.lang.NumberFormatException ex) {
                            activ = "";
                            JOptionPane.showMessageDialog(null, "Ingrese solo números", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    } while (activ.length() == 0 || not < 1.0 || not > 7.0);
                    if (activ != "-1") {
                        ArrayList<Integer> indexes = new ArrayList();
                        for (int i = 0; i < cur.getAlumnos().get(index).getNotasAsig().size(); i++) {
                            if (cur.getAlumnos().get(index).getNotasAsig().get(i).contains("" + asignatura.getSelectedItem())) {
                                indexes.add(i);
                            }
                        }
                        cur.getAlumnos().get(index).getNotasAsig().set(indexes.get(tabla.getSelectedRow() - 5), activ + "," + asignatura.getSelectedItem());
                        try {
                            cur.getAlumnos().get(index).promediarNotasAsig("" + asignatura.getSelectedItem());
                            dat.updateData(cur);
                        } catch (PersistentException ex) {
                            Logger.getLogger(Notas.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        crearTabla();
                    }
                }
            } catch (PersistentException ex) {
                Logger.getLogger(Notas.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione una actividad", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void anteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anteriorActionPerformed
        anterior();
    }//GEN-LAST:event_anteriorActionPerformed

    private void anterior() {
        Notas not = new Notas(curso.getAlumnos().get(index - 1).getNombre(), curso, index - 1, this.gen);
        this.dispose();
        not.setVisible(true);
    }

    private void siguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_siguienteActionPerformed
        siguiente();
    }//GEN-LAST:event_siguienteActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        volver();
    }//GEN-LAST:event_formWindowClosing

    private void añadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_añadirActionPerformed
        añadir();
    }//GEN-LAST:event_añadirActionPerformed

    private void addAsignaturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAsignaturaActionPerformed
        String nom = JOptionPane.showInputDialog(null, "Ingrese nombre de la asignatura", "Nueva asignatura", JOptionPane.QUESTION_MESSAGE);
        if (nom != null) {
            String exis = "";
            for (int i = 0; i < curso.getAsignaturas().size(); i++) {
                exis += curso.getAsignaturas().get(i).getNombre().toLowerCase() + ",";
            }
            if (exis.equals(nom.toLowerCase())) {
                nom = "-1";
            }
            if (nom.length() > 0 && !nom.equals("-1")) {
                int sel;
                if (curso.getAsignaturas().size() > 0) {
                    sel = JOptionPane.showOptionDialog(null, "Desea asignarle un profesor existente?", "Asignar profesor", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[]{"Si", "No"}, -1);
                } else {
                    sel = 1;
                }
                if (sel != -1) {
                    if (sel == 0) {
                        ArrayList<Profesor> profesores = new ArrayList();
                        for (int i = 0; i < curso.getAsignaturas().size(); i++) {
                            if (!profesores.contains(curso.getAsignaturas().get(i).getProfesor())) {
                                profesores.add(curso.getAsignaturas().get(i).getProfesor());
                            }
                        }
                        Object[] ob = new Object[profesores.size()];
                        for (int i = 0; i < profesores.size(); i++) {
                            ob[i] = profesores.get(i).getNombre();
                        }
                        String prof = "" + JOptionPane.showInputDialog(null, "Seleccione profesor", "Selección", JOptionPane.QUESTION_MESSAGE, null, ob, null);
                        if (prof != null) {
                            for (int i = 0; i < profesores.size(); i++) {
                                if (profesores.get(i).getNombre().equals(prof)) {
                                    profesores.get(i).getAsignaturas().add(nom + " " + curso.getNivel() + " " + curso.getLetra());
                                    curso.addAsignatura(profesores.get(i), nom + " " + curso.getNivel() + " " + curso.getLetra());
                                    Database dat = new Database();
                                    dat.addAsignatura(curso.getAsignaturas().get(curso.getAsignaturas().size() - 1), true);
                                    try {
                                        dat.updateData(curso);
                                    } catch (PersistentException ex) {
                                        Logger.getLogger(Notas.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                    Notas not = new Notas(curso.getAlumnos().get(index).getNombre(), this.curso, this.index, this.gen);
                                    this.dispose();
                                    not.setVisible(true);
                                    break;
                                }
                            }
                        }
                    } else {
                        String prof = JOptionPane.showInputDialog(null, "Ingrese nombre del nuevo profesor", "Ingresar", JOptionPane.QUESTION_MESSAGE);
                        if (prof != null && prof.length() > 0) {
                            Profesor p = new Profesor(prof);
                            p.getAsignaturas().add(nom + " " + curso.getNivel() + " " + curso.getLetra());
                            curso.addAsignatura(p, nom + " " + curso.getNivel() + " " + curso.getLetra());
                            Database dat = new Database();
                            dat.addAsignatura(curso.getAsignaturas().get(curso.getAsignaturas().size() - 1), false);
                            try {
                                dat.updateData(curso);
                            } catch (PersistentException ex) {
                                Logger.getLogger(Notas.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            Notas not = new Notas(curso.getAlumnos().get(index).getNombre(), this.curso, this.index, this.gen);
                            this.dispose();
                            not.setVisible(true);
                        }
                    }
                }
            } else if (nom.length() == 0) {
                JOptionPane.showMessageDialog(null, "Ingrese un nombre para la asignatura", "Error", JOptionPane.ERROR_MESSAGE);
            } else if (nom.equals("-1")) {
                JOptionPane.showMessageDialog(null, "Ya existe esta asignatura", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_addAsignaturaActionPerformed

    private void añadir() {
        String desc = JOptionPane.showInputDialog(null, "Ingrese breve descripción de la actividad", "Nueva Actividad");
        if (desc != null) {
            int mes;
            try {
                mes = (int) JOptionPane.showInputDialog(null, "Ingrese mes de la actividad:", "Editar Prueba", JOptionPane.QUESTION_MESSAGE, null, new Object[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, 1);
            } catch (java.lang.NullPointerException ex) {
                mes = -1;
            }
            if (mes != -1) {
                Object[] ob;
                if (mes == 2) {
                    ob = new Object[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28};
                } else if (mes % 2 == 1) {
                    ob = new Object[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31};
                } else {
                    ob = new Object[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30};
                }
                int dia;
                try {
                    dia = (int) JOptionPane.showInputDialog(null, "Ingrese día de la actividad:", "Editar Prueba", JOptionPane.QUESTION_MESSAGE, null, ob, 1);
                } catch (java.lang.NullPointerException ex) {
                    dia = -1;
                }
                if (dia != -1) {
                    String fecha = dia + "/" + mes + "/" + "2017";
                    curso.getAsignaturas().get(asignatura.getSelectedIndex()).añandirActividad(desc, false, fecha);
                    for (int i = 0; i < curso.getAlumnos().size(); i++) {
                        curso.getAlumnos().get(i).añadirNotaAsig("" + asignatura.getSelectedItem());
                    }
                    Database dat = new Database();
                    try {
                        dat.updateData(curso);
                        crearTabla();
                    } catch (PersistentException ex) {
                        Logger.getLogger(Notas.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
    }

    private void siguiente() {
        Notas not = new Notas(curso.getAlumnos().get(index + 1).getNombre(), curso, index + 1, this.gen);
        this.dispose();
        not.setVisible(true);
    }

    private void crearTabla() {
        Curso cur = curso;
        String[] fil = new String[]{"Actividad", "Nota", "Ponderación", "Fecha"};
        if (cur.getAsignaturas().size() > 0) {
            String[][] col = new String[cur.getAsignaturas().get(asignatura.getSelectedIndex()).getPlanificacion().size()][4];
            int cont = 0;
            int pond = 0;
            for (int i = 0; i < cur.getAlumnos().get(index).getNotas().size(); i++) {
                if (cur.getAlumnos().get(index).getNotas().get(i).contains("" + asignatura.getSelectedItem())) {
                    col[cont][0] = cur.getAsignaturas().get(asignatura.getSelectedIndex()).getPlanificacion().get(cont).split(",")[0];
                    col[cont][1] = cur.getAlumnos().get(index).getNotas().get(i).split(",")[0];
                    if (col[cont][1].equals("0")) {
                        col[cont][1] = "Pendiente";
                    }
                    col[cont][2] = cur.getAlumnos().get(index).getNotas().get(i).split(",")[1] + "%";
                    col[cont][3] = cur.getAsignaturas().get(asignatura.getSelectedIndex()).getPlanificacion().get(cont).split(",")[2];
                    cont++;
                    pond += Integer.parseInt(cur.getAlumnos().get(index).getNotas().get(i).split(",")[1]);
                }
            }
            for (int i = 0; i < cur.getAlumnos().get(index).getNotasAsig().size(); i++) {
                if (cur.getAlumnos().get(index).getNotasAsig().get(i).contains("" + asignatura.getSelectedItem())) {
                    col[cont][0] = cur.getAsignaturas().get(asignatura.getSelectedIndex()).getPlanificacion().get(cont).split(",")[0];
                    col[cont][1] = cur.getAlumnos().get(index).getNotasAsig().get(i).split(",")[0];
                    if (col[cont][1].equals("0")) {
                        col[cont][1] = "Pendiente";
                    }
                    col[cont][3] = cur.getAsignaturas().get(asignatura.getSelectedIndex()).getPlanificacion().get(cont).split(",")[2];
                    cont++;
                }
            }
            tabla.setModel(new javax.swing.table.DefaultTableModel(col, fil));
            jLabel5.setText("Ponderación total: " + pond);
            if (pond < 100 || pond > 100) {
                jLabel5.setForeground(new Color(255, 0, 0));
                salir = false;
            } else {
                jLabel5.setForeground(new Color(0, 0, 0));
                salir = false;
            }
            if (pond == 100) {
                salir = true;
            }

            jLabel6.setText("Promedio de la Asignatura: " + cur.getAlumnos().get(index).getPromedioAsignatura("" + asignatura.getSelectedItem()));
            double nota = Double.parseDouble(cur.getAlumnos().get(index).getPromedioAsignatura("" + asignatura.getSelectedItem()));
            if (nota < 4) {
                jLabel6.setForeground(new Color(255, 0, 0));
            } else {
                jLabel6.setForeground(new Color(0, 0, 0));
            }

        } else {
            añadir.setEnabled(false);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton actividad;
    private javax.swing.JButton addAsignatura;
    private javax.swing.JButton anterior;
    private javax.swing.JComboBox<String> asignatura;
    private javax.swing.JButton añadir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton nota;
    private javax.swing.JButton siguiente;
    private javax.swing.JTable tabla;
    private javax.swing.JButton volver;
    // End of variables declaration//GEN-END:variables
}
